namespace kingdom {
    using TrackedTypeMask = utils::table::EnumMask<SizedTrackedType>;

    struct row_t {
        std::pair<Expansion, EditionModifier> expansion_edition_;
        TrackedTypeMask tracked_types_;
        CostGroup cost_group_;
        int8_t amount_;

        constexpr bool operator==(const row_t& other) const noexcept = default;
    };

    using table_t = std::array<row_t, {{size}}uz>;

    static constexpr auto table() noexcept -> const table_t& {
        {{=<% %>=}}
        static constexpr table_t singleton {{
            <%#data%>
            { { Expansion::<%expansion%>, EditionModifier::<%edition_modifier%> }, { <%#tracked_types%>TrackedType::<%.%>, <%/tracked_types%>}, CostGroup::<%cost_group%>, <%amount%> },
            <%/data%>
        }};
        <%={{ }}=%>
        return singleton;
    }

    using ExpansionEditionFilter = utils::table::EnumMask<SizedExpansion, SizedEditionModifier>;
    using CostGroupFilter = utils::table::EnumMask<SizedCostGroup>;

    struct TableQuery {
        TrackedTypeMask tracked_types_{};
        CostGroupFilter cost_group_{};
    };

    using queries_t = std::array<TableQuery, {{num_queries}}uz>;

    static constexpr auto amount_queries() noexcept -> const queries_t& {
        {{=<% %>=}}
        static constexpr queries_t singleton {{
            <%#queries%>
            { {<%#tracked_types%>TrackedType::<%.%>, <%/tracked_types%>}, {CostGroup::<%cost_group%>} },    // <%name%>
            <%/queries%>
        }};
        <%={{ }}=%>
        return singleton;
    }
}
