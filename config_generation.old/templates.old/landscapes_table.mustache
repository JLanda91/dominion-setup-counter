namespace landscapes {
    struct row_t {
        Expansion expansion_;
        Type type_;
        uint8_t amount_;

        constexpr bool operator==(const row_t& other) const noexcept = default;
    };

    using table_t = std::array<row_t, {{size}}uz>;

    static constexpr auto table() noexcept -> const table_t& {
        {{=<% %>=}}
        static constexpr table_t singleton {{
            <%#data%>
            { Expansion::<%expansion%>, Type::<%type%>, <%amount%> },
            <%/data%>
        }};
        <%={{ }}=%>
        return singleton;
    }

    using ExpansionFilter = utils::table::EnumMask<SizedExpansion>;
    using TypeFilter = utils::table::EnumMask<SizedType>;

    struct TableQuery {
        TypeFilter type_{};
    };

    using queries_t = std::array<TableQuery, {{num_queries}}uz>;

    static constexpr auto amount_queries() noexcept -> const queries_t& {
        {{=<% %>=}}
        static constexpr queries_t singleton {{
            <%#queries%>
            { {<%#types%>Type::<%.%>, <%/types%>} },  // <%name%>
            <%/queries%>
        }};
        <%={{ }}=%>
        return singleton;
    }
}

